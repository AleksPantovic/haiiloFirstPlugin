"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jest_createspyobj_1 = require("jest-createspyobj");
const resize_observer_polyfill_1 = __importDefault(require("resize-observer-polyfill"));
const utils_1 = require("ts-jest/utils");
const height_adapter_1 = require("./height-adapter");
jest.mock('resize-observer-polyfill');
class HeightAdapterTest extends height_adapter_1.HeightAdapter {
    set _observer(observer) {
        this.observer = observer;
    }
    get _observer() {
        return this.observer;
    }
}
describe('HeightAdapter', () => {
    let heightAdapterTest;
    let resizeObserverMock;
    beforeEach(() => {
        resizeObserverMock = jest_createspyobj_1.createSpyObj(resize_observer_polyfill_1.default);
        utils_1.mocked(resize_observer_polyfill_1.default).mockImplementation(() => resizeObserverMock);
        heightAdapterTest = new HeightAdapterTest('srcId');
    });
    test('should connect', () => {
        const elem = {};
        const querySelectorSpy = jest.spyOn(document, 'querySelector').mockReturnValueOnce(elem);
        const selectors = 'selectors';
        const throttle = 500;
        heightAdapterTest.connect(selectors, throttle);
        expect(querySelectorSpy).toHaveBeenCalledWith(selectors);
        expect(resizeObserverMock.observe).toHaveBeenCalledWith(elem);
    });
    test('should disconnect', () => {
        const observer = jest_createspyobj_1.createSpyObj(resize_observer_polyfill_1.default);
        heightAdapterTest._observer = observer;
        heightAdapterTest.disconnect();
        expect(observer.disconnect).toHaveBeenCalled();
        expect(heightAdapterTest._observer).toBeNull();
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVpZ2h0LWFkYXB0ZXIuc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9saWIvYWRhcHRlci9oZWlnaHQtYWRhcHRlci5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEseURBQWlEO0FBQ2pELHdGQUFzRDtBQUN0RCx5Q0FBdUM7QUFFdkMscURBQWlEO0FBRWpELElBQUksQ0FBQyxJQUFJLENBQUMsMEJBQTBCLENBQUMsQ0FBQztBQUN0QyxNQUFNLGlCQUFrQixTQUFRLDhCQUFhO0lBQzNDLElBQUksU0FBUyxDQUFDLFFBQStCO1FBQzNDLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0lBQzNCLENBQUM7SUFFRCxJQUFJLFNBQVM7UUFDWCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDdkIsQ0FBQztDQUNGO0FBRUQsUUFBUSxDQUFDLGVBQWUsRUFBRSxHQUFHLEVBQUU7SUFDN0IsSUFBSSxpQkFBb0MsQ0FBQztJQUN6QyxJQUFJLGtCQUErQyxDQUFDO0lBRXBELFVBQVUsQ0FBQyxHQUFHLEVBQUU7UUFDZCxrQkFBa0IsR0FBRyxnQ0FBWSxDQUFDLGtDQUFjLENBQUMsQ0FBQztRQUNsRCxjQUFNLENBQUMsa0NBQWMsQ0FBQyxDQUFDLGtCQUFrQixDQUFDLEdBQUcsRUFBRSxDQUFDLGtCQUFrQixDQUFDLENBQUM7UUFDcEUsaUJBQWlCLEdBQUcsSUFBSSxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNyRCxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxHQUFHLEVBQUU7UUFDMUIsTUFBTSxJQUFJLEdBQUcsRUFBYSxDQUFDO1FBQzNCLE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsZUFBZSxDQUFDLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDekYsTUFBTSxTQUFTLEdBQUcsV0FBVyxDQUFDO1FBQzlCLE1BQU0sUUFBUSxHQUFHLEdBQUcsQ0FBQztRQUVyQixpQkFBaUIsQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBRS9DLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3pELE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNoRSxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyxtQkFBbUIsRUFBRSxHQUFHLEVBQUU7UUFDN0IsTUFBTSxRQUFRLEdBQUcsZ0NBQVksQ0FBQyxrQ0FBYyxDQUFDLENBQUM7UUFDOUMsaUJBQWlCLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQztRQUV2QyxpQkFBaUIsQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUUvQixNQUFNLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFDL0MsTUFBTSxDQUFDLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ2pELENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMifQ==