"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigAdapter = void 0;
const error_handlers_1 = require("../error/error-handlers");
const jwk_store_1 = require("../jwt/jwk-store");
const jwt_handler_1 = require("../jwt/jwt-handler");
const random_1 = require("../utils/random");
/**
 * Service class to react to changes in the config form on COYO side.
 */
class ConfigAdapter {
    /**
     * Creates a new instance of this class.
     *
     * @param srcId the plug-in source ID to use for requests
     * @returns the new instance
     */
    constructor(srcId) {
        this.srcId = srcId;
        this.listener = null;
        this.userId = null;
        this.jwkStore = jwk_store_1.JwkStore.getInstance();
        this.jwtHandler = new jwt_handler_1.JwtHandler();
    }
    /**
     * Bind this instance to a specific user ID to only accept tokens that define
     * the same user ID via "ctx.userId".
     *
     * @param userId the user ID
     */
    bind(userId) {
        this.userId = userId;
    }
    /**
     * Connects the given callback listeners to config form events coming from COYO.
     *
     * @param cb a callback to be executed when the form should be saved
     * @param validate a flag indicating if the JWT response should be validated
     */
    connect(cb, validate) {
        this.disconnect();
        this.listener = (event) => {
            const claims = this.jwtHandler.decodeJwtClaims(event.data);
            if (claims && claims['sub'] === ConfigAdapter.REQ_SUBJECT && claims['ctx.userId'] === this.userId) {
                const jti = claims.jti || random_1.randomStr();
                const respond = (data) => parent.postMessage({ iss: this.srcId, sub: ConfigAdapter.RES_SUBJECT, jti, data }, '*');
                if (validate) {
                    return this.jwtHandler
                        .validateJwt(claims, {})
                        .then(() => {
                        const header = this.jwtHandler.decodeJwtHeader(event.data);
                        return this.jwkStore
                            .getJwk(claims.iss || '', header ? header.jku : undefined)
                            .then(keys => this.jwtHandler.verifyJwt(event.data, ...keys))
                            .catch(err => (err.recover ? error_handlers_1.showErrorAndRecover(err, void 0) : Promise.reject(err)));
                    })
                        .then(() => cb(respond, event.data))
                        .catch(err => error_handlers_1.showError(err));
                }
                else {
                    cb(respond, event.data);
                }
            }
            return Promise.resolve();
        };
        window.addEventListener('message', this.listener);
    }
    /**
     * Disconnects all registered listeners.
     */
    disconnect() {
        if (this.listener) {
            window.removeEventListener('message', this.listener);
            this.listener = null;
        }
    }
}
exports.ConfigAdapter = ConfigAdapter;
ConfigAdapter.REQ_SUBJECT = 'save';
ConfigAdapter.RES_SUBJECT = 'setConfig';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLWFkYXB0ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbGliL2FkYXB0ZXIvY29uZmlnLWFkYXB0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsNERBQXlFO0FBQ3pFLGdEQUE0QztBQUM1QyxvREFBZ0Q7QUFFaEQsNENBQTRDO0FBRTVDOztHQUVHO0FBQ0gsTUFBYSxhQUFhO0lBUXhCOzs7OztPQUtHO0lBQ0gsWUFBNkIsS0FBYTtRQUFiLFVBQUssR0FBTCxLQUFLLENBQVE7UUFYaEMsYUFBUSxHQUFvRCxJQUFJLENBQUM7UUFHakUsV0FBTSxHQUFrQixJQUFJLENBQUM7UUFTckMsSUFBSSxDQUFDLFFBQVEsR0FBRyxvQkFBUSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSx3QkFBVSxFQUFFLENBQUM7SUFDckMsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsSUFBSSxDQUFDLE1BQWM7UUFDakIsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7SUFDdkIsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsT0FBTyxDQUFDLEVBQTBFLEVBQUUsUUFBaUI7UUFDbkcsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ2xCLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxLQUFtQixFQUFFLEVBQUU7WUFDdEMsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzNELElBQUksTUFBTSxJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxhQUFhLENBQUMsV0FBVyxJQUFJLE1BQU0sQ0FBQyxZQUFZLENBQUMsS0FBSyxJQUFJLENBQUMsTUFBTSxFQUFFO2dCQUNqRyxNQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsR0FBRyxJQUFJLGtCQUFTLEVBQUUsQ0FBQztnQkFDdEMsTUFBTSxPQUFPLEdBQUcsQ0FBQyxJQUEwQixFQUFFLEVBQUUsQ0FDN0MsTUFBTSxDQUFDLFdBQVcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxhQUFhLENBQUMsV0FBVyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQztnQkFDMUYsSUFBSSxRQUFRLEVBQUU7b0JBQ1osT0FBTyxJQUFJLENBQUMsVUFBVTt5QkFDbkIsV0FBVyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUM7eUJBQ3ZCLElBQUksQ0FBQyxHQUFHLEVBQUU7d0JBQ1QsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO3dCQUMzRCxPQUFPLElBQUksQ0FBQyxRQUFROzZCQUNqQixNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsSUFBSSxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7NkJBQ3pELElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQzs2QkFDNUQsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxvQ0FBbUIsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQzFGLENBQUMsQ0FBQzt5QkFDRCxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7eUJBQ25DLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLDBCQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztpQkFDakM7cUJBQU07b0JBQ0wsRUFBRSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7aUJBQ3pCO2FBQ0Y7WUFDRCxPQUFPLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUMzQixDQUFDLENBQUM7UUFDRixNQUFNLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxVQUFVO1FBQ1IsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2pCLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ3JELElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO1NBQ3RCO0lBQ0gsQ0FBQzs7QUF4RUgsc0NBeUVDO0FBeEV5Qix5QkFBVyxHQUFHLE1BQU0sQ0FBQztBQUNyQix5QkFBVyxHQUFHLFdBQVcsQ0FBQyJ9