"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jest_createspyobj_1 = require("jest-createspyobj");
const utils_1 = require("ts-jest/utils");
const jwk_store_1 = require("../jwt/jwk-store");
const jwt_handler_1 = require("../jwt/jwt-handler");
const init_adapter_1 = require("./init-adapter");
jest.mock('../jwt/jwt-handler');
jest.mock('../jwt/jwk-store');
jest.mock('../utils/random', () => ({ randomStr: () => 'jti' }));
describe('InitAdapter', () => {
    let initAdapter;
    let jwtHandlerMock;
    let jwkStoreMock;
    beforeEach(() => {
        utils_1.mocked(jwt_handler_1.JwtHandler).mockImplementation(() => jwtHandlerMock);
        jwtHandlerMock = jest_createspyobj_1.createSpyObj(jwt_handler_1.JwtHandler);
        utils_1.mocked(jwk_store_1.JwkStore).getInstance.mockImplementation(() => jwkStoreMock);
        jwkStoreMock = jest_createspyobj_1.createSpyObj(jwk_store_1.JwkStore);
        initAdapter = new init_adapter_1.InitAdapter('srcId');
    });
    test('should be defined', () => {
        expect(initAdapter).toBeDefined();
    });
    test('should send', done => {
        const timeout = 1000;
        const validate = true;
        jwtHandlerMock.decodeJwtClaims.mockReturnValue({ jti: 'jti' });
        jwtHandlerMock.decodeJwtHeader.mockReturnValue({});
        jwtHandlerMock.validateJwt.mockResolvedValue();
        jwtHandlerMock.verifyJwt.mockResolvedValue();
        jwkStoreMock.getJwk.mockResolvedValue([{}]);
        const result = initAdapter.send(timeout, validate).finally(() => done());
        window.postMessage('token', '*');
        return result;
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5pdC1hZGFwdGVyLnNwZWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbGliL2FkYXB0ZXIvaW5pdC1hZGFwdGVyLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx5REFBaUQ7QUFDakQseUNBQXVDO0FBRXZDLGdEQUE0QztBQUM1QyxvREFBZ0Q7QUFFaEQsaURBQTZDO0FBRTdDLElBQUksQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsQ0FBQztBQUNoQyxJQUFJLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUM7QUFDOUIsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztBQUVqRSxRQUFRLENBQUMsYUFBYSxFQUFFLEdBQUcsRUFBRTtJQUMzQixJQUFJLFdBQXdCLENBQUM7SUFDN0IsSUFBSSxjQUF1QyxDQUFDO0lBQzVDLElBQUksWUFBbUMsQ0FBQztJQUV4QyxVQUFVLENBQUMsR0FBRyxFQUFFO1FBQ2QsY0FBTSxDQUFDLHdCQUFVLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUM1RCxjQUFjLEdBQUcsZ0NBQVksQ0FBQyx3QkFBVSxDQUFDLENBQUM7UUFDMUMsY0FBTSxDQUFDLG9CQUFRLENBQUMsQ0FBQyxXQUFXLENBQUMsa0JBQWtCLENBQUMsR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDcEUsWUFBWSxHQUFHLGdDQUFZLENBQUMsb0JBQVEsQ0FBQyxDQUFDO1FBQ3RDLFdBQVcsR0FBRyxJQUFJLDBCQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDekMsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsbUJBQW1CLEVBQUUsR0FBRyxFQUFFO1FBQzdCLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNwQyxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLEVBQUU7UUFDekIsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDO1FBQ3JCLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQztRQUV0QixjQUFjLENBQUMsZUFBZSxDQUFDLGVBQWUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBQy9ELGNBQWMsQ0FBQyxlQUFlLENBQUMsZUFBZSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ25ELGNBQWMsQ0FBQyxXQUFXLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztRQUMvQyxjQUFjLENBQUMsU0FBUyxDQUFDLGlCQUFpQixFQUFFLENBQUM7UUFDN0MsWUFBWSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLEVBQWUsQ0FBQyxDQUFDLENBQUM7UUFFekQsTUFBTSxNQUFNLEdBQUcsV0FBVyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7UUFFekUsTUFBTSxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFFakMsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyJ9