"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jest_mock_extended_1 = require("jest-mock-extended");
const jwt_decode_1 = __importDefault(require("jwt-decode"));
const utils_1 = require("ts-jest/utils");
const jwt_handler_1 = require("./jwt-handler");
jest.mock('jwt-decode');
jest.mock('rfc4648');
describe('JwtHandler', () => {
    let windowSpy;
    let subtle;
    let jwtHandler;
    beforeEach(() => {
        windowSpy = jest.spyOn(global, 'window', 'get');
        subtle = jest_mock_extended_1.mock();
        jwtHandler = new jwt_handler_1.JwtHandler();
        windowSpy.mockImplementation(() => ({ crypto: { subtle } }));
    });
    afterEach(() => {
        utils_1.mocked(jwt_decode_1.default).mockRestore();
    });
    test('should decode JWT token header', () => {
        const token = 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxMjMifQ.VzdiNEOc4GJMhU5ovtnioXMXWD6SJzdkaGtY32NaEuk';
        const parameters = { alg: 'HS256' };
        utils_1.mocked(jwt_decode_1.default).mockReturnValue(parameters);
        const result = jwtHandler.decodeJwtHeader(token);
        expect(jwt_decode_1.default).toHaveBeenCalledWith(token, { header: true });
        expect(result).toEqual(parameters);
    });
    test('should decode JWT token claims', () => {
        const token = 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxMjMifQ.VzdiNEOc4GJMhU5ovtnioXMXWD6SJzdkaGtY32NaEuk';
        const claims = { iss: 'issuer' };
        utils_1.mocked(jwt_decode_1.default).mockReturnValue(claims);
        const result = jwtHandler.decodeJwtClaims(token);
        expect(jwt_decode_1.default).toHaveBeenCalledWith(token);
        expect(result).toEqual(claims);
    });
    test('should return null for invalid tokens when decoding header', () => {
        const token1 = 'Hello World';
        const token2 = 123;
        const result1 = jwtHandler.decodeJwtHeader(token1);
        const result2 = jwtHandler.decodeJwtHeader(token2);
        expect(jwt_decode_1.default).not.toHaveBeenCalled();
        expect(result1).toBeNull();
        expect(result2).toBeNull();
    });
    test('should return null for invalid tokens when decoding claims', () => {
        const token1 = 'Hello World';
        const token2 = 123;
        const result1 = jwtHandler.decodeJwtClaims(token1);
        const result2 = jwtHandler.decodeJwtClaims(token2);
        expect(jwt_decode_1.default).not.toHaveBeenCalled();
        expect(result1).toBeNull();
        expect(result2).toBeNull();
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiand0LWhhbmRsZXIuc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9saWIvand0L2p3dC1oYW5kbGVyLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSwyREFBMEM7QUFDMUMsNERBQW9DO0FBQ3BDLHlDQUF1QztBQUV2QywrQ0FBMkM7QUFFM0MsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUN4QixJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBRXJCLFFBQVEsQ0FBQyxZQUFZLEVBQUUsR0FBRyxFQUFFO0lBQzFCLElBQUksU0FBbUMsQ0FBQztJQUN4QyxJQUFJLE1BQWlDLENBQUM7SUFDdEMsSUFBSSxVQUFzQixDQUFDO0lBRTNCLFVBQVUsQ0FBQyxHQUFHLEVBQUU7UUFDZCxTQUFTLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ2hELE1BQU0sR0FBRyx5QkFBSSxFQUFnQixDQUFDO1FBQzlCLFVBQVUsR0FBRyxJQUFJLHdCQUFVLEVBQUUsQ0FBQztRQUM5QixTQUFTLENBQUMsa0JBQWtCLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxFQUFFLE1BQU0sRUFBRSxFQUFVLENBQUEsQ0FBQyxDQUFDO0lBQ3RFLENBQUMsQ0FBQyxDQUFDO0lBRUgsU0FBUyxDQUFDLEdBQUcsRUFBRTtRQUNiLGNBQU0sQ0FBQyxvQkFBVSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDbkMsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsZ0NBQWdDLEVBQUUsR0FBRyxFQUFFO1FBQzFDLE1BQU0sS0FBSyxHQUFHLHFGQUFxRixDQUFDO1FBQ3BHLE1BQU0sVUFBVSxHQUFHLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRSxDQUFDO1FBQ3BDLGNBQU0sQ0FBQyxvQkFBVSxDQUFDLENBQUMsZUFBZSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRS9DLE1BQU0sTUFBTSxHQUFHLFVBQVUsQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFakQsTUFBTSxDQUFDLG9CQUFVLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUNqRSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3JDLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLGdDQUFnQyxFQUFFLEdBQUcsRUFBRTtRQUMxQyxNQUFNLEtBQUssR0FBRyxxRkFBcUYsQ0FBQztRQUNwRyxNQUFNLE1BQU0sR0FBRyxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsQ0FBQztRQUNqQyxjQUFNLENBQUMsb0JBQVUsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUUzQyxNQUFNLE1BQU0sR0FBRyxVQUFVLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRWpELE1BQU0sQ0FBQyxvQkFBVSxDQUFDLENBQUMsb0JBQW9CLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDL0MsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNqQyxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyw0REFBNEQsRUFBRSxHQUFHLEVBQUU7UUFDdEUsTUFBTSxNQUFNLEdBQUcsYUFBYSxDQUFDO1FBQzdCLE1BQU0sTUFBTSxHQUFHLEdBQUcsQ0FBQztRQUVuQixNQUFNLE9BQU8sR0FBRyxVQUFVLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ25ELE1BQU0sT0FBTyxHQUFHLFVBQVUsQ0FBQyxlQUFlLENBQUMsTUFBYSxDQUFDLENBQUM7UUFFMUQsTUFBTSxDQUFDLG9CQUFVLENBQUMsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUMxQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDM0IsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQzdCLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLDREQUE0RCxFQUFFLEdBQUcsRUFBRTtRQUN0RSxNQUFNLE1BQU0sR0FBRyxhQUFhLENBQUM7UUFDN0IsTUFBTSxNQUFNLEdBQUcsR0FBRyxDQUFDO1FBRW5CLE1BQU0sT0FBTyxHQUFHLFVBQVUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDbkQsTUFBTSxPQUFPLEdBQUcsVUFBVSxDQUFDLGVBQWUsQ0FBQyxNQUFhLENBQUMsQ0FBQztRQUUxRCxNQUFNLENBQUMsb0JBQVUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBQzFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUMzQixNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDN0IsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyJ9