"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.JwkStore = void 0;
const plugin_error_1 = require("../error/plugin-error");
/**
 * Singleton service class to register and retrieve JSON Web Keys.
 */
class JwkStore {
    constructor() {
        this.localCryptoKeys = [];
        this.remoteCryptoOrigins = [];
        this.remoteCryptoCache = new Map();
        // hide from the outside world
    }
    /**
     * Retrieves the singleton instance of this service class.
     *
     * @returns the singleton instance
     */
    static getInstance() {
        if (!JwkStore.instance) {
            JwkStore.instance = new JwkStore();
        }
        return JwkStore.instance;
    }
    /**
     * Register a new trustworthy URL to retrieve JSON Web Keys from.
     *
     * @param url the URL to register
     */
    addHost(url) {
        this.remoteCryptoOrigins.push(new URL(url).origin);
    }
    /**
     * Registers a new set of JSON Web Keys in the store. It is possible to
     * register multiple keys for a single environment in order to account for
     * key renewals with a transition period.
     *
     * @param test a regular expression to check if this key is applicable
     * @param jwk the JSON Web Key(s) to register
     */
    addJwk(test, ...jwk) {
        this.localCryptoKeys.push([test, jwk]);
    }
    /**
     * Retrieves a set of JSON Web Keys for the given environment URL.
     *
     * @param iss the environment URL provided in the `iss` claim of the token
     * @returns a promise holding the corresponding Crypto keys
     */
    getJwk(iss, jku) {
        if (!window.crypto || !window.crypto.subtle) {
            return Promise.reject(new plugin_error_1.PluginError(plugin_error_1.PluginErrorCode.CryptoNotFound, 'Insecure plug-in communication', true));
        }
        const keys = this.localCryptoKeys.find(([regEx]) => iss.match(regEx));
        if (keys) {
            const cryptos = keys[1].map(key => window.crypto.subtle.importKey('jwk', key.key, key.alg, false, ['verify']));
            return Promise.all(cryptos);
        }
        else if (jku) {
            return this.remoteCryptoOrigins.indexOf(new URL(jku).origin) !== -1
                ? this.loadJwk(jku).then(key => [key])
                : Promise.reject(new plugin_error_1.PluginError(plugin_error_1.PluginErrorCode.CryptoKeyNotTrusted, 'Insecure plug-in communication', true));
        }
        else {
            return Promise.reject(new plugin_error_1.PluginError(plugin_error_1.PluginErrorCode.CryptoKeyNotFound, 'Insecure plug-in communication', true));
        }
    }
    /**
     * Retrieves a JSON Web Key from the given URL.
     *
     * @param url the remote URL that hosts the JWK data
     * @param timeout the request timeout in milliseconds
     * @returns a promise holding the corresponding Crypto key
     */
    loadJwk(url, timeout = 60000) {
        const cached = this.remoteCryptoCache.get(url);
        if (cached) {
            return Promise.resolve(cached);
        }
        // eslint-disable-next-line @typescript-eslint/no-this-alias
        const store = this;
        return new Promise(function (resolve, reject) {
            const xhr = new XMLHttpRequest();
            xhr.open('GET', url, true);
            xhr.timeout = timeout;
            xhr.onload = function () {
                const jwk = JSON.parse(xhr.responseText);
                window.crypto.subtle.importKey('jwk', jwk.key, jwk.alg, false, ['verify']).then(crypto => {
                    store.remoteCryptoCache.set(url, crypto);
                    resolve(crypto);
                });
            };
            xhr.onerror = function () {
                reject(new plugin_error_1.PluginError(plugin_error_1.PluginErrorCode.CryptoKeyNotFoundRemote, 'Insecure plug-in communication', true));
            };
            xhr.send();
        });
    }
    /**
     * Resets the store.
     */
    reset() {
        this.localCryptoKeys = [];
        this.remoteCryptoOrigins = [];
        this.remoteCryptoCache.clear();
    }
}
exports.JwkStore = JwkStore;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiandrLXN0b3JlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2xpYi9qd3QvandrLXN0b3JlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHdEQUFxRTtBQUlyRTs7R0FFRztBQUNILE1BQWEsUUFBUTtJQU1uQjtRQUpVLG9CQUFlLEdBQXNCLEVBQUUsQ0FBQztRQUN4Qyx3QkFBbUIsR0FBYSxFQUFFLENBQUM7UUFDbkMsc0JBQWlCLEdBQTJCLElBQUksR0FBRyxFQUFFLENBQUM7UUFHOUQsOEJBQThCO0lBQ2hDLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsTUFBTSxDQUFDLFdBQVc7UUFDaEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUU7WUFDdEIsUUFBUSxDQUFDLFFBQVEsR0FBRyxJQUFJLFFBQVEsRUFBRSxDQUFDO1NBQ3BDO1FBQ0QsT0FBTyxRQUFRLENBQUMsUUFBUSxDQUFDO0lBQzNCLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsT0FBTyxDQUFDLEdBQVc7UUFDakIsSUFBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBRUQ7Ozs7Ozs7T0FPRztJQUNILE1BQU0sQ0FBQyxJQUFZLEVBQUUsR0FBRyxHQUFVO1FBQ2hDLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDekMsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsTUFBTSxDQUFDLEdBQVcsRUFBRSxHQUFZO1FBQzlCLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUU7WUFDM0MsT0FBTyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksMEJBQVcsQ0FBQyw4QkFBZSxDQUFDLGNBQWMsRUFBRSxnQ0FB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