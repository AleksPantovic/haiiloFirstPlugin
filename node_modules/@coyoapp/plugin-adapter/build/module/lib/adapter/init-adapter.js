import { showError, showErrorAndRecover } from '../error/error-handlers';
import { PluginError, PluginErrorCode } from '../error/plugin-error';
import { JwkStore } from '../jwt/jwk-store';
import { JwtHandler } from '../jwt/jwt-handler';
import { randomStr } from '../utils/random';
/**
 * Service class to initialize a plug-in and retrieve initialization response
 * information.
 */
export class InitAdapter {
    /**
     * Creates a new instance of this class.
     *
     * @param srcId the plug-in source ID to use for requests
     * @returns the new instance
     */
    constructor(srcId) {
        this.srcId = srcId;
        this.jwkStore = JwkStore.getInstance();
        this.jwtHandler = new JwtHandler();
    }
    /**
     * Sends an initialization message to the parent window (i.e. COYO)
     * and retrieves the response.
     *
     * @param timeout a maximum time to wait for the response
     * @param validate a flag indicating if the JWT response should be validated
     * @returns a promise holding the decoded (and possibly validated) JWT claims
     */
    send(timeout, validate) {
        return new Promise((resolve, reject) => {
            let listener = null;
            let timer = null;
            const clear = () => {
                if (listener !== null) {
                    window.removeEventListener('message', listener);
                }
                if (timer !== null) {
                    clearTimeout(timer);
                }
            };
            const jti = randomStr();
            listener = (event) => {
                const claims = this.jwtHandler.decodeJwtClaims(event.data);
                if (claims && claims.jti === jti) {
                    clear();
                    if (validate) {
                        this.jwtHandler
                            .validateJwt(claims, { sub: InitAdapter.REQ_SUBJECT })
                            .then(() => {
                            const header = this.jwtHandler.decodeJwtHeader(event.data);
                            return this.jwkStore
                                .getJwk(claims.iss || '', header ? header.jku : undefined)
                                .then(keys => this.jwtHandler.verifyJwt(event.data, ...keys))
                                .catch(err => (err.recover ? showErrorAndRecover(err, void 0) : Promise.reject(err)));
                        })
                            .then(() => resolve([claims, event.data]))
                            .catch(err => showError(err));
                    }
                    else {
                        resolve([claims, event.data]);
                    }
                }
            };
            timer = window.setTimeout(() => {
                clear();
                reject(new PluginError(PluginErrorCode.MessageTimeout, `Initialization timed out after ${timeout}ms`));
            }, timeout);
            window.addEventListener('message', listener);
            parent.postMessage({ iss: this.srcId, sub: InitAdapter.RES_SUBJECT, jti }, '*');
        });
    }
}
InitAdapter.REQ_SUBJECT = 'init';
InitAdapter.RES_SUBJECT = 'init';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5pdC1hZGFwdGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2xpYi9hZGFwdGVyL2luaXQtYWRhcHRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLG1CQUFtQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDekUsT0FBTyxFQUFFLFdBQVcsRUFBRSxlQUFlLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNyRSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFFNUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUU1Qzs7O0dBR0c7QUFDSCxNQUFNLE9BQU8sV0FBVztJQU10Qjs7Ozs7T0FLRztJQUNILFlBQTZCLEtBQWE7UUFBYixVQUFLLEdBQUwsS0FBSyxDQUFRO1FBQ3hDLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxVQUFVLEVBQUUsQ0FBQztJQUNyQyxDQUFDO0lBRUQ7Ozs7Ozs7T0FPRztJQUNILElBQUksQ0FBQyxPQUFlLEVBQUUsUUFBaUI7UUFDckMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtZQUNyQyxJQUFJLFFBQVEsR0FBMkMsSUFBSSxDQUFDO1lBQzVELElBQUksS0FBSyxHQUFrQixJQUFJLENBQUM7WUFDaEMsTUFBTSxLQUFLLEdBQUcsR0FBRyxFQUFFO2dCQUNqQixJQUFJLFFBQVEsS0FBSyxJQUFJLEVBQUU7b0JBQ3JCLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxTQUFTLEVBQUUsUUFBUSxDQUFDLENBQUM7aUJBQ2pEO2dCQUNELElBQUksS0FBSyxLQUFLLElBQUksRUFBRTtvQkFDbEIsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO2lCQUNyQjtZQUNILENBQUMsQ0FBQztZQUVGLE1BQU0sR0FBRyxHQUFHLFNBQVMsRUFBRSxDQUFDO1lBQ3hCLFFBQVEsR0FBRyxDQUFDLEtBQW1CLEVBQUUsRUFBRTtnQkFDakMsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUMzRCxJQUFJLE1BQU0sSUFBSSxNQUFNLENBQUMsR0FBRyxLQUFLLEdBQUcsRUFBRTtvQkFDaEMsS0FBSyxFQUFFLENBQUM7b0JBQ1IsSUFBSSxRQUFRLEVBQUU7d0JBQ1osSUFBSSxDQUFDLFVBQVU7NkJBQ1osV0FBVyxDQUFDLE1BQU0sRUFBRSxFQUFFLEdBQUcsRUFBRSxXQUFXLENBQUMsV0FBVyxFQUFFLENBQUM7NkJBQ3JELElBQUksQ0FBQyxHQUFHLEVBQUU7NEJBQ1QsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDOzRCQUMzRCxPQUFPLElBQUksQ0FBQyxRQUFRO2lDQUNqQixNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsSUFBSSxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7aUNBQ3pELElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQztpQ0FDNUQsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7d0JBQzFGLENBQUMsQ0FBQzs2QkFDRCxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDOzZCQUN6QyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztxQkFDakM7eUJBQU07d0JBQ0wsT0FBTyxDQUFDLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO3FCQUMvQjtpQkFDRjtZQUNILENBQUMsQ0FBQztZQUVGLEtBQUssR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRTtnQkFDN0IsS0FBSyxFQUFFLENBQUM7Z0JBQ1IsTUFBTSxDQUFDLElBQUksV0FBVyxDQUFDLGVBQWUsQ0FBQyxjQUFjLEVBQUUsa0NBQWtDLE9BQU8sSUFBSSxDQUFDLENBQUMsQ0FBQztZQUN6RyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFFWixNQUFNLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBQzdDLE1BQU0sQ0FBQyxXQUFXLENBQUMsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsV0FBVyxDQUFDLFdBQVcsRUFBRSxHQUFHLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNsRixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7O0FBcEV1Qix1QkFBVyxHQUFHLE1BQU0sQ0FBQztBQUNyQix1QkFBVyxHQUFHLE1BQU0sQ0FBQyJ9