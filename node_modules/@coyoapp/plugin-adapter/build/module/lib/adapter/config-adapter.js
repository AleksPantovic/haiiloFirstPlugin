import { showError, showErrorAndRecover } from '../error/error-handlers';
import { JwkStore } from '../jwt/jwk-store';
import { JwtHandler } from '../jwt/jwt-handler';
import { randomStr } from '../utils/random';
/**
 * Service class to react to changes in the config form on COYO side.
 */
export class ConfigAdapter {
    /**
     * Creates a new instance of this class.
     *
     * @param srcId the plug-in source ID to use for requests
     * @returns the new instance
     */
    constructor(srcId) {
        this.srcId = srcId;
        this.listener = null;
        this.userId = null;
        this.jwkStore = JwkStore.getInstance();
        this.jwtHandler = new JwtHandler();
    }
    /**
     * Bind this instance to a specific user ID to only accept tokens that define
     * the same user ID via "ctx.userId".
     *
     * @param userId the user ID
     */
    bind(userId) {
        this.userId = userId;
    }
    /**
     * Connects the given callback listeners to config form events coming from COYO.
     *
     * @param cb a callback to be executed when the form should be saved
     * @param validate a flag indicating if the JWT response should be validated
     */
    connect(cb, validate) {
        this.disconnect();
        this.listener = (event) => {
            const claims = this.jwtHandler.decodeJwtClaims(event.data);
            if (claims && claims['sub'] === ConfigAdapter.REQ_SUBJECT && claims['ctx.userId'] === this.userId) {
                const jti = claims.jti || randomStr();
                const respond = (data) => parent.postMessage({ iss: this.srcId, sub: ConfigAdapter.RES_SUBJECT, jti, data }, '*');
                if (validate) {
                    return this.jwtHandler
                        .validateJwt(claims, {})
                        .then(() => {
                        const header = this.jwtHandler.decodeJwtHeader(event.data);
                        return this.jwkStore
                            .getJwk(claims.iss || '', header ? header.jku : undefined)
                            .then(keys => this.jwtHandler.verifyJwt(event.data, ...keys))
                            .catch(err => (err.recover ? showErrorAndRecover(err, void 0) : Promise.reject(err)));
                    })
                        .then(() => cb(respond, event.data))
                        .catch(err => showError(err));
                }
                else {
                    cb(respond, event.data);
                }
            }
            return Promise.resolve();
        };
        window.addEventListener('message', this.listener);
    }
    /**
     * Disconnects all registered listeners.
     */
    disconnect() {
        if (this.listener) {
            window.removeEventListener('message', this.listener);
            this.listener = null;
        }
    }
}
ConfigAdapter.REQ_SUBJECT = 'save';
ConfigAdapter.RES_SUBJECT = 'setConfig';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLWFkYXB0ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbGliL2FkYXB0ZXIvY29uZmlnLWFkYXB0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3pFLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUM1QyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFFaEQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRTVDOztHQUVHO0FBQ0gsTUFBTSxPQUFPLGFBQWE7SUFReEI7Ozs7O09BS0c7SUFDSCxZQUE2QixLQUFhO1FBQWIsVUFBSyxHQUFMLEtBQUssQ0FBUTtRQVhoQyxhQUFRLEdBQW9ELElBQUksQ0FBQztRQUdqRSxXQUFNLEdBQWtCLElBQUksQ0FBQztRQVNyQyxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUN2QyxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksVUFBVSxFQUFFLENBQUM7SUFDckMsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsSUFBSSxDQUFDLE1BQWM7UUFDakIsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7SUFDdkIsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsT0FBTyxDQUFDLEVBQTBFLEVBQUUsUUFBaUI7UUFDbkcsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ2xCLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxLQUFtQixFQUFFLEVBQUU7WUFDdEMsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzNELElBQUksTUFBTSxJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxhQUFhLENBQUMsV0FBVyxJQUFJLE1BQU0sQ0FBQyxZQUFZLENBQUMsS0FBSyxJQUFJLENBQUMsTUFBTSxFQUFFO2dCQUNqRyxNQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsR0FBRyxJQUFJLFNBQVMsRUFBRSxDQUFDO2dCQUN0QyxNQUFNLE9BQU8sR0FBRyxDQUFDLElBQTBCLEVBQUUsRUFBRSxDQUM3QyxNQUFNLENBQUMsV0FBVyxDQUFDLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLGFBQWEsQ0FBQyxXQUFXLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDO2dCQUMxRixJQUFJLFFBQVEsRUFBRTtvQkFDWixPQUFPLElBQUksQ0FBQyxVQUFVO3lCQUNuQixXQUFXLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQzt5QkFDdkIsSUFBSSxDQUFDLEdBQUcsRUFBRTt3QkFDVCxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7d0JBQzNELE9BQU8sSUFBSSxDQUFDLFFBQVE7NkJBQ2pCLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQzs2QkFDekQsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDOzZCQUM1RCxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLG1CQUFtQixDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDMUYsQ0FBQyxDQUFDO3lCQUNELElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQzt5QkFDbkMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7aUJBQ2pDO3FCQUFNO29CQUNMLEVBQUUsQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO2lCQUN6QjthQUNGO1lBQ0QsT0FBTyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDM0IsQ0FBQyxDQUFDO1FBQ0YsTUFBTSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDcEQsQ0FBQztJQUVEOztPQUVHO0lBQ0gsVUFBVTtRQUNSLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNqQixNQUFNLENBQUMsbUJBQW1CLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNyRCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztTQUN0QjtJQUNILENBQUM7O0FBdkV1Qix5QkFBVyxHQUFHLE1BQU0sQ0FBQztBQUNyQix5QkFBVyxHQUFHLFdBQVcsQ0FBQyJ9