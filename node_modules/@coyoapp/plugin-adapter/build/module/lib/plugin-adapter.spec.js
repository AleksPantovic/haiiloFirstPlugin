import { createSpyObj } from 'jest-createspyobj';
import { mocked } from 'ts-jest/utils';
import { ConfigAdapter } from './adapter/config-adapter';
import { HeightAdapter } from './adapter/height-adapter';
import { InitAdapter } from './adapter/init-adapter';
import { JWK_PROD, JWK_PROD_NEW, JWK_PROD_RGX, JWK_STAGE, JWK_STAGE_NEW, JWK_STAGE_RGX } from './jwt/jwk-defaults';
import { JwkStore } from './jwt/jwk-store';
import { PluginAdapter } from './plugin-adapter';
jest.mock('./jwt/jwk-store');
jest.mock('./adapter/init-adapter');
jest.mock('./adapter/config-adapter');
jest.mock('./adapter/height-adapter');
describe('PluginAdapter', () => {
    let windowSpy;
    let jwkStoreMock;
    let initAdapterMock;
    let configAdapterMock;
    let heightAdapterMock;
    let pluginAdapter;
    beforeEach(() => {
        windowSpy = jest.spyOn(window, 'window', 'get');
        mocked(JwkStore).getInstance.mockImplementation(() => jwkStoreMock);
        jwkStoreMock = createSpyObj(JwkStore);
        mocked(InitAdapter).mockImplementation(() => initAdapterMock);
        initAdapterMock = createSpyObj(InitAdapter);
        mocked(ConfigAdapter).mockImplementation(() => configAdapterMock);
        configAdapterMock = createSpyObj(ConfigAdapter);
        mocked(HeightAdapter).mockImplementation(() => heightAdapterMock);
        heightAdapterMock = createSpyObj(HeightAdapter);
        pluginAdapter = new PluginAdapter('srcId');
    });
    afterEach(() => {
        windowSpy.mockRestore();
    });
    test('should use the given src ID', () => {
        expect(pluginAdapter.srcId).toBe('srcId');
    });
    test('should use the query src ID', () => {
        windowSpy.mockImplementation(() => ({
            location: {
                href: 'https://example.com?src=querySrcId'
            }
        }));
        pluginAdapter = new PluginAdapter();
        expect(pluginAdapter.srcId).toBe('querySrcId');
    });
    test('should fallback without any src ID', () => {
        pluginAdapter = new PluginAdapter();
        expect(pluginAdapter.srcId).toBe('');
    });
    test('should register hosts', () => {
        expect(jwkStoreMock.addHost.mock.calls).toContainEqual(['https://certificates.plugins.coyoapp.com']);
    });
    test('should register keys', () => {
        expect(jwkStoreMock.addJwk.mock.calls).toContainEqual([JWK_STAGE_RGX, JWK_STAGE, JWK_STAGE_NEW]);
        expect(jwkStoreMock.addJwk.mock.calls).toContainEqual([JWK_PROD_RGX, JWK_PROD, JWK_PROD_NEW]);
    });
    test('should init', () => {
        const claims = {
            sub: 'subject',
            'ctx.userId': 'userID',
            'cfg.text': 'Hello World',
            'cfg.bool': true,
            'stt.edit': false
        };
        const token = 'token';
        initAdapterMock.send.mockReturnValueOnce(Promise.resolve([claims, token]));
        const result = pluginAdapter.init();
        return result.then(v => {
            expect(initAdapterMock.send).toBeCalledWith(60000, true);
            expect(v).toStrictEqual({
                claims: {
                    cfg: {
                        bool: true,
                        text: 'Hello World'
                    },
                    ctx: {
                        userId: 'userID'
                    },
                    stt: {
                        edit: false
                    },
                    sub: 'subject'
                },
                token: 'token',
                validated: true
            });
        });
    });
    test('should connect to config adapter', () => {
        const cb = () => {
            /* empty */
        };
        const result = pluginAdapter.onSave(cb);
        expect(configAdapterMock.connect).toHaveBeenCalledWith(cb, true);
        result();
        expect(configAdapterMock.disconnect).toHaveBeenCalled();
    });
    test('should connect to height adapter', () => {
        const result = pluginAdapter.observeHeight();
        expect(heightAdapterMock.connect).toHaveBeenCalledWith('html', 50);
        result();
        expect(heightAdapterMock.disconnect).toHaveBeenCalled();
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGx1Z2luLWFkYXB0ZXIuc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvcGx1Z2luLWFkYXB0ZXIuc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDakQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV2QyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDekQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ3pELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUNyRCxPQUFPLEVBQUUsUUFBUSxFQUFFLFlBQVksRUFBRSxZQUFZLEVBQUUsU0FBUyxFQUFFLGFBQWEsRUFBRSxhQUFhLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNuSCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDM0MsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRWpELElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQztBQUM3QixJQUFJLENBQUMsSUFBSSxDQUFDLHdCQUF3QixDQUFDLENBQUM7QUFDcEMsSUFBSSxDQUFDLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO0FBQ3RDLElBQUksQ0FBQyxJQUFJLENBQUMsMEJBQTBCLENBQUMsQ0FBQztBQUV0QyxRQUFRLENBQUMsZUFBZSxFQUFFLEdBQUcsRUFBRTtJQUM3QixJQUFJLFNBQW1DLENBQUM7SUFDeEMsSUFBSSxZQUFtQyxDQUFDO0lBQ3hDLElBQUksZUFBeUMsQ0FBQztJQUM5QyxJQUFJLGlCQUE2QyxDQUFDO0lBQ2xELElBQUksaUJBQTZDLENBQUM7SUFDbEQsSUFBSSxhQUE0QixDQUFDO0lBRWpDLFVBQVUsQ0FBQyxHQUFHLEVBQUU7UUFD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