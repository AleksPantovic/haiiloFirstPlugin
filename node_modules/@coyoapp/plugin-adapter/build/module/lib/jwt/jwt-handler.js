import jwt_decode from 'jwt-decode';
import { base64url } from 'rfc4648';
import { PluginError, PluginErrorCode } from '../error/plugin-error';
/**
 * Service class providing functionality to handle and verify JSON Web Tokens.
 */
export class JwtHandler {
    /**
     * Decodes a Base64Url encoded JSON Web Token header.
     *
     * @param token the JWT token
     * @returns the decoded JSON header parameters or `null` if it is not a JWT token
     */
    decodeJwtHeader(token) {
        return this.isJwt(token) ? jwt_decode(token, { header: true }) : null;
    }
    /**
     * Decodes a Base64Url encoded JSON Web Token.
     *
     * @param token the JWT token
     * @returns the decoded JSON object or `null` if it is not a JWT token
     */
    decodeJwtClaims(token) {
        return this.isJwt(token) ? jwt_decode(token) : null;
    }
    /**
     * Verifies the signature of the given JSON Web Token against a set of keys.
     * Only one of the keys needs to match in order to resolve the resulting
     * promise.
     *
     * @param token the JWT token
     * @param key the set of keys to check the token against
     * @returns an empty promise that resolves if the token is valid
     */
    verifyJwt(token, ...keys) {
        const encoder = new window.TextEncoder();
        const [header, payload, signature] = token.split('.');
        const data = encoder.encode(`${header}.${payload}`);
        const sign = base64url.parse(signature, { loose: true });
        if (!window.crypto || !window.crypto.subtle) {
            Promise.reject(new PluginError(PluginErrorCode.CryptoNotFound, 'Insecure plug-in communication', true));
        }
        return Promise.any(keys.map(key => window.crypto.subtle
            .verify(key.algorithm, key, sign, data)
            .then(valid => (valid ? Promise.resolve() : Promise.reject())))).catch(() => Promise.reject(new PluginError(PluginErrorCode.InvalidTokenSignature, 'Invalid plug-in token')));
    }
    /**
     * Validates the given decoded JWT token. Checks if the given claims align
     * with the validation claims. Furthermore the token's `nbf` and `exp` claims
     * are checked if they are defined in the token. A small leeway, usually no
     * more than a few minutes, may be used to account for clock skew.
     *
     * @param claims the decoded JWT token
     * @param validation the reference claims to check
     * @param leeway a small leeway to account for clock skew
     * @returns an empty promise that resolves if the token is valid
     */
    validateJwt(claims, validation, leeway = 60000) {
        const validationClaims = ['iss', 'sub', 'aud', 'jti'];
        for (const claim of validationClaims) {
            if (validation[claim] && validation[claim] !== claims[claim]) {
                return Promise.reject(new PluginError(PluginErrorCode.InvalidTokenClaim, 'Invalid plug-in token'));
            }
        }
        const now = Date.now();
        if (claims.exp && claims.exp >= now + leeway) {
            return Promise.reject(new PluginError(PluginErrorCode.InvalidTokenExp, 'Invalid plug-in token'));
        }
        else if (claims.nbf && claims.nbf < now - leeway) {
            return Promise.reject(new PluginError(PluginErrorCode.InvalidTokenNbf, 'Invalid plug-in token'));
        }
        return Promise.resolve();
    }
    isJwt(token) {
        return typeof token === 'string' && token.match(/^[A-Za-z0-9-_=]+\.[A-Za-z0-9-_=]+\.?[A-Za-z0-9-_.+/=]*$/) !== null;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiand0LWhhbmRsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbGliL2p3dC9qd3QtaGFuZGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLFVBQVUsTUFBTSxZQUFZLENBQUM7QUFDcEMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUVwQyxPQUFPLEVBQUUsV0FBVyxFQUFFLGVBQWUsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBS3JFOztHQUVHO0FBQ0gsTUFBTSxPQUFPLFVBQVU7SUFDckI7Ozs7O09BS0c7SUFDSCxlQUFlLENBQUMsS0FBYTtRQUMzQixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBWSxLQUFLLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQ25GLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILGVBQWUsQ0FBQyxLQUFhO1FBQzNCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFZLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDakUsQ0FBQztJQUVEOzs7Ozs7OztPQVFHO0lBQ0gsU0FBUyxDQUFDLEtBQWEsRUFBRSxHQUFHLElBQWlCO1FBQzNDLE1BQU0sT0FBTyxHQUFHLElBQUksTUFBTSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ3pDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsT0FBTyxFQUFFLFNBQVMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDdEQsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHLE1BQU0sSUFBSSxPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBQ3BELE1BQU0sSUFBSSxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7UUFFekQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRTtZQUMzQyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksV0FBVyxDQUFDLGVBQWUsQ0FBQyxjQUFjLEVBQUUsZ0NBQWdDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztTQUN6RztRQUVELE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FDaEIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUNiLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTTthQUNqQixNQUFNLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQzthQUN0QyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUNqRSxDQUNGLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxXQUFXLENBQUMsZUFBZSxDQUFDLHFCQUFxQixFQUFFLHVCQUF1QixDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2pILENBQUM7SUFFRDs7Ozs7Ozs7OztPQVVHO0lBQ0gsV0FBVyxDQUNULE1BQWlCLEVBQ2pCLFVBQXNFLEVBQ3RFLE1BQU0sR0FBRyxLQUFLO1FBRWQsTUFBTSxnQkFBZ0IsR0FBbUMsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztRQUN0RixLQUFLLE1BQU0sS0FBSyxJQUFJLGdCQUFnQixFQUFFO1lBQ3BDLElBQUksVUFBVSxDQUFDLEtBQUssQ0FBQyxJQUFJLFVBQVUsQ0FBQyxLQUFLLENBQUMsS0FBSyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQzVELE9BQU8sT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLFdBQVcsQ0FBQyxlQUFlLENBQUMsaUJBQWlCLEVBQUUsdUJBQXVCLENBQUMsQ0FBQyxDQUFDO2FBQ3BHO1NBQ0Y7UUFFRCxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDdkIsSUFBSSxNQUFNLENBQUMsR0FBRyxJQUFJLE1BQU0sQ0FBQyxHQUFHLElBQUksR0FBRyxHQUFHLE1BQU0sRUFBRTtZQUM1QyxPQUFPLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxXQUFXLENBQUMsZUFBZSxDQUFDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxDQUFDLENBQUM7U0FDbEc7YUFBTSxJQUFJLE1BQU0sQ0FBQyxHQUFHLElBQUksTUFBTSxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsTUFBTSxFQUFFO1lBQ2xELE9BQU8sT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLFdBQVcsQ0FBQyxlQUFlLENBQUMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLENBQUMsQ0FBQztTQUNsRztRQUVELE9BQU8sT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQzNCLENBQUM7SUFFTyxLQUFLLENBQUMsS0FBYTtRQUN6QixPQUFPLE9BQU8sS0FBSyxLQUFLLFFBQVEsSUFBSSxLQUFLLENBQUMsS0FBSyxDQUFDLHlEQUF5RCxDQUFDLEtBQUssSUFBSSxDQUFDO0lBQ3RILENBQUM7Q0FDRiJ9